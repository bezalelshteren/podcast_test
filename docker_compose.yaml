#version: "3.9"

services:
  # Kafka broker
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      retries: 5
      start_period: 10s

  # Kafka UI
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - my_network


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
#    volumes:
#      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - my_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - my_network

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
    networks:
      - my_network



  manager_the_read_and_send:
    build:
      context: .
      dockerfile: ./manager_the_read_and_send/Dockerfile
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - my_network



  manage_consumer_and_writing_to_mongo_and_elastic:
    build:
      context: .
      dockerfile: ./manage_consumer_and_writing_to_mongo_and_elastic/Dockerfile
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
      manager_the_read_and_send:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    volumes:
      - ."C:\Users\User\Downloads\podcasts\podcasts":app
    networks:
      - my_network


  convert_text_to_speach:
    build:
      context: .
      dockerfile: convert_text_to_speach/Dockerfile
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - my_network
    volumes:
      - ."C:\Users\User\Downloads\podcasts\podcasts":app


  procces_and_enrich:
    build:
      context: .
      dockerfile: ./procces_and_enrich/Dockerfile
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      convert_text_to_speach:
        condition: service_started
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
